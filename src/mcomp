#!/usr/bin/env node

let componentName = process.argv[2];
let props = process.argv[3] || "" 

let fs = require('fs');
let path = require('path');

const targetDeposit = (targetDir, currentDir, depositName, depositContent) => {

  if (targetDir === currentDir.split("/").slice(-1)[0]) {
    fs.writeFileSync(`${currentDir}/${depositName}`, depositContent);
    return `${currentDir}/${depositName}`;
  } else {
    try {
      let lowerDirContents = fs.readdirSync(currentDir);
      let correctResult;
      lowerDirContents.forEach((dir) => {
        let result = targetDeposit(targetDir, path.resolve(currentDir + "/" + dir), depositName, depositContent);
        if (result) return result;
      });
    } catch(e) {
      // do nothing
    }
  }

}

let component = 
`import React from 'react';
import {
  BrowserRouter as Router,
  Route,
  NavLink,
  Link,
  Switch,
} from 'react-router-dom'

const ${componentName} = (${props}) => {
  
  return (
  
  );
}

export default ${componentName};
`

let pathToComponent = targetDeposit("components", process.env.PWD, `${componentName}.js`, component);
let pathToContainer = targetDeposit("containers", process.env.PWD, `${componentName}Container.js`, "substitute");
//let pathInCommon = pathToComponent.split("").filter((char, idx) => pathToContainer.split("")[idx] === char).join("");

//let lastDirInCommon = `/${pathInCommon.split("/").slice(-1)}`
//let relativePath = path.relative(pathToContainer, lastDirInCommon);


let container = 
`import React, {Component} from 'react';
import { connect } from 'react-redux';
import { withRouter } from 'react-router-dom';
import ${componentName} from '../components/${componentName}.js';

// optional  
import serialize from 'form-serialize';

let ${componentName}Container = (${props}) => {
  return ( 
    
  )
}

const mapStateToProps = (state, ownProps) => {
  return {

  }
}

const mapDispatchToProps = (dispatch, ownProps) => {
  return {

  }
}

${componentName}Container = withRouter(
  connect(mapStateToProps, mapDispatchToProps)(${componentName})
);

export default ${componentName}Container;

`

targetDeposit("containers", process.env.PWD, `${componentName}Container.js`, container);

//fs.writeFileSync(`./components/${process.argv[2]}.js`, component);
//fs.writeFileSync(`./containers/${process.argv[2]}Container.js`, container);
